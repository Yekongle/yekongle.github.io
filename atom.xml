<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yekongle</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yekongle.github.io/"/>
  <updated>2020-03-28T15:01:25.244Z</updated>
  <id>https://yekongle.github.io/</id>
  
  <author>
    <name>Yekongle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot2 实战系列之使用HTTPS</title>
    <link href="https://yekongle.github.io/2020/03/28/springboot-https-sample/"/>
    <id>https://yekongle.github.io/2020/03/28/springboot-https-sample/</id>
    <published>2020-03-28T14:47:57.000Z</published>
    <updated>2020-03-28T15:01:25.244Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;各位小伙伴有没有发现，现在的网站基本都用上了 HTTP，因为 HTTP的通信是明文的，容易被不怀好意的人监听通信，窥探用户的隐私，这简直就是裸奔。而 HTTPS 使用 SSL 证书在加密通信前进行身份验证，协商加密算法以及交换密钥，可以满足基本的安全需求，即防窃取，防篡改，防钓鱼。&lt;/p&gt;
&lt;p&gt;https 通信的流程如下:&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://yekongle.github.io/categories/Spring-Boot/"/>
    
    
      <category term="SpringBoot" scheme="https://yekongle.github.io/tags/SpringBoot/"/>
    
      <category term="https" scheme="https://yekongle.github.io/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>Hexo更换电脑如何同步博客配置解决办法</title>
    <link href="https://yekongle.github.io/2020/03/28/hexo-online/"/>
    <id>https://yekongle.github.io/2020/03/28/hexo-online/</id>
    <published>2020-03-28T08:42:03.000Z</published>
    <updated>2020-03-28T08:50:02.573Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;关于使用 Hexo 搭建个人博客可参考本人另一篇博文: &lt;a href=&quot;https://blog.csdn.net/qq_23483671/article/details/78635372&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo框架+NextT主题搭建博客教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;相信有不少小伙伴使用 Hexo 来搭建自己的个人博客，但问题是如果你电脑突然坏了，或者你想在其他电脑编辑发表你的博客，又要花费时间精力来重新配置你的站点，这样就比较麻烦。这时，我们可以将我们的站点放到 Github 或者其他 Git 托管平台，如此一来，无论你在哪里，都可以随时 clone 下来，简单配置下，就可以继续玩耍。&lt;br&gt;
    
    </summary>
    
      <category term="Interesting" scheme="https://yekongle.github.io/categories/Interesting/"/>
    
    
      <category term="hexo" scheme="https://yekongle.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot2 实战系列之属性配置</title>
    <link href="https://yekongle.github.io/2020/03/28/springboot-properties-sample/"/>
    <id>https://yekongle.github.io/2020/03/28/springboot-properties-sample/</id>
    <published>2020-03-28T06:14:26.000Z</published>
    <updated>2020-03-28T08:55:49.513Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在项目中我们常常需要配置一些基本的属性，比如连接数据库的 URL, Driven, username，password 等，这些配置内容如果放在代码中会变得难以维护, 想象一下，当你的应用配置信息临时需要变更时，你要改动代码然后重新编译打包再部署，如此一来就耗费大量时间，给用户带来不好体验。因此，我们通常将配置信息放在一个配置文件中，一般以 ==.properties== 结尾，因为可以直接通过 Properties 类读取。&lt;/p&gt;
&lt;p&gt;在 Spring Boot 中，默认使用一个全局的配置文件 ==application.properties==, 同时也支持 ==application.yml==, 默认放在 ==src/main/resource== 下面, 可以直接将 .properties 改为 .yml, 效果一样。两者区别: &lt;strong&gt;properties 的配置是以 key=value 格式存储内容，而 yaml 则是以数据为中心的语言，配置更加清晰&lt;/strong&gt;。如下面两者配置方式对比：&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot" scheme="https://yekongle.github.io/categories/Spring-Boot/"/>
    
    
      <category term="SpringBoot" scheme="https://yekongle.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java常见设计模式</title>
    <link href="https://yekongle.github.io/2019/03/19/common-design-patterns/"/>
    <id>https://yekongle.github.io/2019/03/19/common-design-patterns/</id>
    <published>2019-03-19T13:35:43.000Z</published>
    <updated>2020-03-28T05:57:56.250Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;设计模式的概念最早来源于建筑大师 Alexander 的《建筑的永恒方法一书》，书中的观点实际上也适用于软件设计领域。Alexander 是这样描述模式的：&lt;br&gt;&lt;strong&gt;模式是一条有三个部分组成的通用规则：它表示了一个特定环境、一类问题和一个解决方案之间的关系。每一个模式描述了一个不断重复发生的问题，以及该问题解决方案的核心设计。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://yekongle.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://yekongle.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Cordova开发篇</title>
    <link href="https://yekongle.github.io/2019/01/29/cordova-dev-learn/"/>
    <id>https://yekongle.github.io/2019/01/29/cordova-dev-learn/</id>
    <published>2019-01-29T15:06:16.000Z</published>
    <updated>2020-03-28T05:57:56.287Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Android-平台&quot;&gt;&lt;a href=&quot;#Android-平台&quot; class=&quot;headerlink&quot; title=&quot;Android 平台&quot;&gt;&lt;/a&gt;Android 平台&lt;/h3&gt;&lt;p&gt;支持的Android API级别和过去几个cordova-android版本的Android版本：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;cordova-android 版本&lt;/th&gt;
&lt;th&gt;支持的 API 级别&lt;/th&gt;
&lt;th&gt;实际安卓版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;7.X.X&lt;/td&gt;
&lt;td&gt;19 - 27&lt;/td&gt;
&lt;td&gt;4.4 - 8.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6.X.X&lt;/td&gt;
&lt;td&gt;16 - 26&lt;/td&gt;
&lt;td&gt;4.1 - 8.0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.X.X&lt;/td&gt;
&lt;td&gt;14 - 23&lt;/td&gt;
&lt;td&gt;4.0 - 6.0.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.1.X&lt;/td&gt;
&lt;td&gt;14 - 22&lt;/td&gt;
&lt;td&gt;4.0 - 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.0.X&lt;/td&gt;
&lt;td&gt;10 - 22&lt;/td&gt;
&lt;td&gt;2.3.3 - 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.7.X&lt;/td&gt;
&lt;td&gt;10 - 21&lt;/td&gt;
&lt;td&gt;2.3.3 - 5.0.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="mobile" scheme="https://yekongle.github.io/categories/mobile/"/>
    
    
      <category term="Cordova" scheme="https://yekongle.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>Cordova快速入门</title>
    <link href="https://yekongle.github.io/2019/01/22/cordova-quick-learn/"/>
    <id>https://yekongle.github.io/2019/01/22/cordova-quick-learn/</id>
    <published>2019-01-21T16:39:51.000Z</published>
    <updated>2020-03-28T05:57:56.239Z</updated>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h3&gt;&lt;h4 id=&quot;数说移动端的几种开发模式&quot;&gt;&lt;a href=&quot;#数说移动端的几种开发模式&quot; class=&quot;headerlink&quot; title=&quot;数说移动端的几种开发模式&quot;&gt;&lt;/a&gt;数说移动端的几种开发模式&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Native App: 采用原生代码进行，优点就是体验好，缺点是需要为不同的系统平台独立开发一套应用，开发成本较高。&lt;/li&gt;
&lt;li&gt;Web app: 一般是指 SAP(SinglePageApplication) 模式开发出的网站，体验较差。&lt;/li&gt;
&lt;li&gt;React Native App: 是 Facebook 开源的一套App开发解决方案，让你只使用 JavaScript 也能够编写原生移动应用，它在设计原理上和 React 一致，通过声明式的组件机制来搭建丰富多彩的用户界面，能够实现大部分的跨平台，体验较好。&lt;/li&gt;
&lt;li&gt;Hybrid App: 混合开发模式，由Native 通过 JSBridge(一种)等方法提供统一的API，然后用前端语言(HTML、JS、CSS) 来写实际的界面和逻辑，再调用API，最终应用的页面是在 webview中示，从而达到跨平台效果，常见的是用Phonegap或Cordova中间件组合其他移动UI框架进行开发。&lt;/li&gt;
&lt;li&gt;值得注意的是，RN App 和 Hybrid App 还是有本质区别的，RN App 是用JavaScript告诉原生语言做什么，所以最终在平台上运行的都是原生语言，包括UI等，也是原生的组件，而 Hybrid App中显示的大多是 webview，webview 里套常见的移动UI框架。Hybird App的原理图如下W：&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mobile" scheme="https://yekongle.github.io/categories/mobile/"/>
    
    
      <category term="Cordova" scheme="https://yekongle.github.io/tags/Cordova/"/>
    
  </entry>
  
  <entry>
    <title>PR视频字幕批量生成程序(用讯飞听见识别音频)</title>
    <link href="https://yekongle.github.io/2017/11/23/auto-caption-procedure/"/>
    <id>https://yekongle.github.io/2017/11/23/auto-caption-procedure/</id>
    <published>2017-11-23T08:52:20.000Z</published>
    <updated>2020-03-28T05:57:56.206Z</updated>
    
    <summary type="html">
    
      &lt;p&gt; 用过视频剪辑软件的小伙伴们可能都会为添加视频字幕所烦恼，尤其是当一个视频包含了大量语音而且只有你一个人在配字幕的时候,那就变得很蛋疼；尽管到最后你完成了这么庞大的工作量，但是你都会一度怀疑自己的人生。我曾经为一个十来分钟的视频配字幕都配到我想吐。&lt;br&gt;
    
    </summary>
    
      <category term="Interesting" scheme="https://yekongle.github.io/categories/Interesting/"/>
    
    
      <category term="Clip" scheme="https://yekongle.github.io/tags/Clip/"/>
    
      <category term="Caption" scheme="https://yekongle.github.io/tags/Caption/"/>
    
      <category term="Java" scheme="https://yekongle.github.io/tags/Java/"/>
    
  </entry>
  
</feed>
